#!/usr/bin/env node

const { execSync } = require('node:child_process');
const fs = require('node:fs');
const path = require('node:path');

const { program } = require('commander');
const { container: { logger } } = require('../lib/container');

program
  .version('0.0.2')
  .description('Orwell CLI');

program.command('scaffold')
  .description('Scaffold alerts project structure')
  .option('-s, --server <server>', 'Server target. It can be commsplat or gopay')
  .option('-g, --group-name <group name>', 'Name of the alert grouping')
  .option('--base-dir <alerts base dir>', 'Base directory for alerts. Default is src')
  .option('--dest <project destination>', 'Destination directory for the project. Default is current directory')
  .option('-n, --name <name>', 'Name of the alert')
  .option('--no-git', 'To skip git repository initialization')
  .action((options) => {
    const groupName = options.groupName || 'alert-group';
    const alertBaseDir = options.baseDir || 'src';
    const server = options.server;
    const name = options.name;
    const dest = options.dest;

    if (!name) {
      console.error('Please provide an alert name using -n or --name');
      process.exit(1);
    }

    if (!server || !['commsplat', 'gopay'].includes(server)) {
      console.error('Please provide a server name using -s or --server. Options: commsplat, gopay');
      process.exit(1);
    }

    // Define paths
    const baseDir = dest || process.cwd();
    const srcDir = path.join(baseDir, alertBaseDir);
    const alertGroupDir = path.join(srcDir, groupName);
    const sharedDir = path.join(srcDir, 'shared');
    const alertDir = path.join(alertGroupDir, name);

    const watcherFile = path.join(alertDir, `watcher.${server}.non-prod.json`);
    const scriptFile = path.join(alertDir, 'script.groovy');
    const sharedScriptFile = path.join(sharedDir, 'shared.groovy');

    // Create directories and files
    createDirectory(srcDir);
    createDirectory(alertGroupDir);
    createDirectory(alertDir);
    createDirectory(sharedDir);

    const scaffoldSharedFileLocation = path.resolve(__dirname, '../lib/scaffold/shared.groovy');
    const scaffoldWatchJSONFileLocation = path.resolve(__dirname, '../lib/scaffold/watcher.sample.json');
    const sharedFileContent = fs.readFileSync(scaffoldSharedFileLocation, 'utf8');
    const watcherFileContent = fs.readFileSync(scaffoldWatchJSONFileLocation, 'utf8')
      .toString()
      .replace('{{alertId}}', name);

    createFile(watcherFile, watcherFileContent.toString());
    createFile(sharedScriptFile, sharedFileContent.toString());
    createFile(scriptFile, '#include "../../shared/shared.groovy"');

    if(options.git) {
      process.chdir(baseDir);
      execSync('git init');
    }

    logger.info(`Project structure scaffolded successfully at ${alertDir}`);
  });

program.command('push')
  .description('Push alerts to the server')
  .option('-b, --diff-branch <diff branch name>', 'Branch to compare with. Default is current branch')
  .option('-p, --project-id <project id>', 'Project ID to avoid conflicts')
  .option('--base-dir <alerts base dir>', 'Base directory for alerts. Default is src', 'src')
  .option('--main-branch <main branch name>', 'Main branch name. Default is main', 'main')
  .option('--dry-run', 'Dry run the push')
  .option('--endpoint <endpoint>', 'Elastic endpoint where watchers and scripts will be sent to. Default: ELASTIC_ENDPOINT env var')
  .option('--api-key <api key>', 'Elastic Api Key to athenticate the request. Default: ELASTIC_API_KEY env var')
  .option('--username <username>', 'Elastic username to authenticate the request. Default: ELASTIC_USERNAME env var')
  .option('--password <password>', 'Elastic password to authenticate the request. Default: ELASTIC_PASSWORD env var')
  .option('--target <target>', 'Pattern to specicy which alerts to pick (e.g. commsplat.non-prod, gopaydev.prod)')
  .action(require('../lib/commands/push'))

require('../lib/commands/eval-javascript-watch')(program);
require('../lib/commands/heartbeat')(program);
require('../lib/commands/sync')(program);

program.parse(process.argv);

function createDirectory(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`Created directory: ${dirPath}`);
  }
}

function createFile(filePath, content) {
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, content);
    console.log(`Created file: ${filePath}`);
  }
}
